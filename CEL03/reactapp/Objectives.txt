Class Exercise Lab

React Life Cycle - Updating life cycle Hooks

In class components, you can directly extend from React Component to access the lifecycle methods, but to use them in the functional components you need React Hooks.

componentDidMount:
A lifecycle method runs or executes after the component is mounted and rendered to the DOM. It is called only once during the component's lifecycle after the component mounting is done.

Program:
A class component Customers is available as below.
class Customers extends React.Component
{
    //componentDidMount() in Class Component
    state ={
        customers:[]
    };
    componentDidMount(){
        let data=[
            {id:101,name:"Charles"},
            {id:102,name:"Kumar"}
        ];
        this.setState({customers:data});
    }
    render()
    {
        //Display Customer Data 
        return <div> </div>;
    }
}
export default Customers;

Convert the Customers Class Component into Clients functional component. Display the clients name.
You can achieve the same using useEffect hook.

Lab Environment

In the project environment, there are two folders.

a. react - react folder is the read-only folder and has the project's test cases.

b. reactapp â€“ explore your code in this folder. you can use it for coding.

Default settings mapped to run the frontend application in PORT-8081:

The package.json file in reactapp folder is modified as: (Note -If not you can change it as below)

"scripts": {

"start": "PORT=8081 react-scripts start",

"build": "react-scripts build",

"test": "react-scripts test",

"eject": "react-scripts eject"}

 

To run the application:

 

Open the terminal - From Menu bar, select Terminal, then Open Terminal

 

Type the below commands to execute the react project

 

cd reactapp - command to open the folder

 

nvm use 14 - command to select the node version to 14

 

npm install - command to add the packages
[All packages are declared within package.json file]

 

npm start - command to run the application in PORT 8081